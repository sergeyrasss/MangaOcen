import os
import subprocess
import time
from pathlib import Path

# Конфигурация
REPO_ROOT = Path("/home/den/MangaOcen")
IMAGES_DIR = REPO_ROOT / "GrandBlue" / "downloaded_images"
BATCH_SIZE = 30  # Уменьшил размер пакета для надежности
DELAY = 15  # Увеличил задержку

def run_git_command(cmd):
    """Выполняет git команду с подробным выводом"""
    print(f"\nВыполняю: {' '.join(cmd)}")
    try:
        result = subprocess.run(
            cmd,
            cwd=REPO_ROOT,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            check=True
        )
        print(f"Успешно. Вывод:\n{result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"Ошибка!\nКоманда: {' '.join(e.cmd)}\nОшибка: {e.stderr}")
        return False

def get_image_files():
    """Получает список изображений с проверкой"""
    files = []
    for ext in ['.jpg', '.jpeg', '.png', '.webp']:
        files.extend(list(IMAGES_DIR.glob(f'*{ext}')))
        files.extend(list(IMAGES_DIR.glob(f'*{ext.upper()}'))))
    
    if not files:
        print("⚠️ В папке нет изображений!")
        print(f"Проверьте путь: {IMAGES_DIR}")
        print("Доступные файлы:")
        for f in IMAGES_DIR.glob('*'):
            print(f"  - {f.name}")
        exit(1)
    
    return sorted(files, key=lambda x: x.name)

def process_batch(batch, batch_num):
    """Обрабатывает один пакет файлов"""
    print(f"\n{'='*50}")
    print(f"ПАКЕТ {batch_num} ({len(batch)} файлов)")
    print(f"Пример файла: {batch[0].name}")
    
    # Добавляем файлы
    added_count = 0
    for file in batch:
        rel_path = file.relative_to(REPO_ROOT)
        if run_git_command(["git", "add", str(rel_path)]):
            added_count += 1
    
    if added_count == 0:
        print("⚠️ Не удалось добавить файлы!")
        return False
    
    # Коммит
    commit_msg = f"Добавлено {added_count} изображений (пакет {batch_num})"
    if not run_git_command(["git", "commit", "-m", commit_msg]):
        print("Отменяем пакет из-за ошибки коммита")
        run_git_command(["git", "reset"])
        return False
    
    # Push
    for attempt in range(3):
        if run_git_command(["git", "push", "origin", "main"]):
            return True
        if attempt < 2:
            print(f"Повтор через {DELAY} сек (попытка {attempt+2}/3)...")
            time.sleep(DELAY)
    return False

def main():
    print("="*50)
    print("НАЧАЛО ЗАГРУЗКИ ИЗОБРАЖЕНИЙ")
    print(f"Репо: {REPO_ROOT}")
    print(f"Папка с изображениями: {IMAGES_DIR}")
    print("="*50)
    
    # Проверка git
    if not run_git_command(["git", "status"]):
        print("Ошибка: проблема с git репозиторием!")
        exit(1)
    
    # Получаем файлы
    image_files = get_image_files()
    print(f"\nНайдено {len(image_files)} изображений")
    
    # Разбиваем на пакеты
    batches = [image_files[i:i+BATCH_SIZE] for i in range(0, len(image_files), BATCH_SIZE)]
    print(f"Будет отправлено {len(batches)} пакетов")
    
    # Обрабатываем пакеты
    success_count = 0
    for i, batch in enumerate(batches, 1):
        if process_batch(batch, i):
            success_count += 1
        time.sleep(DELAY)
    
    print("\n" + "="*50)
    print(f"РЕЗУЛЬТАТ:")
    print(f"Успешно отправлено пакетов: {success_count}/{len(batches)}")
    print(f"Всего изображений: {len(image_files)}")
    print("="*50)

if __name__ == "__main__":
    main()